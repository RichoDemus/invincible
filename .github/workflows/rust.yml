name: Rust

on:
  push:
    branches: [ main ]
#  pull_request:
#    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  dependencies:
    name: cargo build | dependencies
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: cache
        uses: actions/cache@v2
        id: cargo-cache
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
            ${{ runner.os }}-cargo-

      - name: install deps
        run: sudo apt-get install libudev-dev libasound2-dev portaudio19-dev build-essential libpulse-dev libdbus-1-dev

      - name: cargo build | dependencies
        uses: actions-rs/cargo@v1
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        with:
          command: build
          args: --all-features

#      - name: cargo build | dev dependencies
#        uses: actions-rs/cargo@v1
#        if: steps.cargo-cache.outputs.cache-hit != 'true'
#        with:
#          command: test
#          args: --all-features --no-run

  #      - name: Install cargo-web
  #        run: cargo install cargo-web

  check:
    name: cargo check
    needs: dependencies
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}

      - name: install libudev
        run: sudo apt-get install libudev-dev libasound2-dev portaudio19-dev build-essential libpulse-dev libdbus-1-dev

      - name: cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

      - name: cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  test:
    name: cargo test
    needs: dependencies
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}

      - name: install libudev
        run: sudo apt-get install libudev-dev libasound2-dev portaudio19-dev build-essential libpulse-dev libdbus-1-dev

      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features

  deploy:
    name: deploy to github pages
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}

      - name: install libudev
        run: sudo apt-get install libudev-dev libasound2-dev portaudio19-dev build-essential libpulse-dev libdbus-1-dev

      - name: Install wasm-bindgen
        run: cargo install --locked wasm-bindgen-cli

      - name: Add wasm32-unknown-unknown
        run: rustup target add wasm32-unknown-unknown

      - name: Build wasm
        run: cargo build --release --target wasm32-unknown-unknown --features bevy/webgl2

      - name: wasm-bindgen
        run: wasm-bindgen --out-name invincible-wasm --out-dir target/deploy --target web ./target/wasm32-unknown-unknown/release/invincible.wasm

      - name: copy index.html
        uses: canastro/copy-file-action@master
        with:
          source: "index.html"
          target: "target/deploy/index.html"

      - name: copy assets
        uses: canastro/copy-file-action@master
        with:
          flags: "-r"
          source: "assets"
          target: "target/deploy/"

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages # The branch the action should deploy to.
          FOLDER: target/deploy # The folder the action should deploy.
